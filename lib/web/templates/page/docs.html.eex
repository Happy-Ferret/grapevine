<div class="row">
  <div class="col-md-4">
    <h5>Table of Contents</h5>

    <ul>
      <li><%= link("Game Configuration", to: "#config") %></li>
      <li><%= link("Channels", to: "#channels-basic") %></li>
      <li><%= link("Server Support", to: "#server-support") %></li>
      <li><%= link("Connecting", to: "#connecting") %></li>
      <li><%= link("Expectations of a Connecting Game", to: "#citizen") %></li>
      <li><%= link("Common Vocabulary", to: "#common-vocabulary") %></li>
      <li><%= link("Socket Error Codes", to: "#socket-errors") %></li>
      <li>
        <%= link("Core Events", to: "#channels") %>
        <ul>
          <li><%= link("authenticate", to: "#authenticate") %></li>
          <li><%= link("heartbeat", to: "#heartbeat") %></li>
          <li><%= link("restart", to: "#restart") %></li>
          <li><%= link("channels/subscribe", to: "#channels-subscribe") %></li>
          <li><%= link("channels/unsubscribe", to: "#channels-unsubscribe") %></li>
          <li><%= link("channels/broadcast", to: "#channels-broadcast") %></li>
          <li><%= link("channels/send", to: "#channels-send") %></li>
        </ul>
      </li>
      <li>
        <%= link("Player Events", to: "#players") %>
        <ul>
          <li><%= link("players/sign-in", to: "#players-sign-in") %></li>
          <li><%= link("players/sign-out", to: "#players-sign-out") %></li>
          <li><%= link("players/status", to: "#players-status") %></li>
        </ul>
      </li>
      <li>
        <%= link("Tell Events", to: "#tells") %>
        <ul>
          <li><%= link("tells/send", to: "#tells-send") %></li>
          <li><%= link("tells/receive", to: "#tells-receive") %></li>
        </ul>
      </li>
      <li>
        <%= link("Game Events", to: "#games") %>
        <ul>
          <li><%= link("games/status", to: "#games-status") %></li>
        </ul>
      </li>
    </ul>
  </div>

  <div class="col-md-8">
<h2>Docs</h2>

<p>Thanks for checking out Gossip.</p>

<%= if !Map.get(assigns, :current_user) do %>
  <p>Before continuing, you should <%= link("create an account", to: registration_path(@conn, :new)) %> or <%= link("sign in", to: session_path(@conn, :new)) %>.</p>
<% end %>

<h3 id="config">
  <%= link(to: "#config") do %>
    Game Configuration
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p>Once you have an account, visit your <%= link("configuration page", to: user_game_path(@conn, :index)) %>. This will let you create a game on Gossip. It will then show you your Client ID and Client Secret which will be used to authenticate against the Gossip network.</p>

<h3 id="channels-basic">
  <%= link(to: "#channels-basic") do %>
    Channels
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p>You also subscribe to the channels you want your game to pay attention to. Right now Gossip has the following channels:<p>

<ul>
  <%= Enum.map(Channels.all(), fn channel -> %>
    <li><code><%= channel.name %></code></li>
  <% end) %>
</ul>

<p>In addition to those listed above, you can subscribe to any valid channel name. This will make dynamically create channels as you subscribe to them. They will exist for anyone to connect to, but not show on the website until the admins approve them.</p>

<p>A valid channel name must be &lt;=15 characters and letters only.</p>

<p>You will only recieve messages for channels you are subscribed to.</p>

<h3 id="server-support">
  <%= link(to: "#server-support") do %>
    Server Support
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p>The following servers/frameworks have built-in support or a library to import for Gossip support:</p>

<ul>
  <li><%= link("ExVenture", to: "https://exventure.org/admin/gossip/") %></li>
  <li><%= link("Elixir", to: "https://github.com/oestrich/gossip-elixir") %></li>
  <li><%= link("Ranvier", to: "https://github.com/oestrich/gossip-ranvier") %></li>
  <li><%= link("Javascript", to: "https://github.com/dinchak/node-gossiphaus") %></li>
</ul>

<h3 id="connecting">
  <%= link(to: "#connecting") do %>
    Connecting
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p>Once you have your Client ID and Client Secret, you can start connecting to the Gossip network. Point your websocket client at:</p>

<pre><code><%= socket_url() %></code></pre>

<p>Once you are connected, you must send an <code>authenticate</code> message to authenticate your connection.</p>

<h3 id="citizen">
  <%= link(to: "#citizen") do %>
    Expectations of a Connecting Game
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p>If you are connecting to the Gossip network, please know that you connect under the following assumptions:</p>

<ol>
  <li>Gossip <em>will</em> go down sometime while you are connected. Most likely for a new deploy. Make sure your game does not crash because of this.</li>
  <li>While Gossip is down, your app should transition channels to local only.</li>
  <li>Similarly, you should reconnect back to Gossip when it comes back online.</li>
  <li>You must support UTF-8 at the server level. Several connected games allow UTF-8 input so you may receive it at any time.</li>
</ol>

<p>It is suggested to follow these:</p>

<ol>
  <li>Formatting for player names should be in the format of <code>Player@GameName</code>.</li>
</ol>

<h3 id="common-vocabulary">
  <%= link(to: "#common-vocabulary") do %>
    Common Vocabulary
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<ul>
  <li><code>ref</code> is a unique reference that identifies an event in a request and response. This should be a UUID.</li>
  <li><code>channel</code> is the name of a channel on Gossip.</li>
  <li><code>game</code> is the short name of a connected game.</li>
  <li><code>channel</code> is the name of a lilayer in a connected game.</li>
</ul>

<h3 id="socket-errors">
  <%= link(to: "#socket-errors") do %>
    Socket Error Codes
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<dl>
  <dt>4000</dt>
  <dd>Authentication failed</dd>

  <dt>4001</dt>
  <dd>Heartbeat failure</dd>
</dl>

<hr />
<%= DocView.flag_header("channels", "Core Events") %>

<p><b>Since 1.0.0</b></p>

<p>These are the core features of connecting to Gossip. These include authenticating, a heartbeat, basic public channels.</p>

<%= DocView.event_header("authenticate") %>

<p><b>Since 1.0.0</b></p>

<p>This event authorizes the connection and afterwards you will start to receive new broadcasts.</p>

<pre>{
  "event": "authenticate",
  "payload": {
    "client_id": "client id",
    "client_secret": "client secret",
    "supports": ["channels"],
    "channels": ["gossip"],
    "version": "1.0.0",
    "user_agent": "ExVenture 0.23.0"
  }
}</pre>

<ul>
  <li><code>supports</code> is required. This is an array of features the connecting game supports. It must contain at least <code>channels</code>. Extra unknown options will result in the socket being disconnected.</li>
  <li><code>channels</code> is optional. This is an array of channels you wish to subscribe to on start. See the <%= link("list of channels", to: chat_path(@conn, :index)) %> for available channels you can subscribe to.</li>
  <li><code>user_agent</code> is optional but suggested. If present, this will show on the <%= link("Games", to: game_path(@conn, :index)) %> page.</li>
  <li><code>version</code> is optional but suggested. This is highest version number that you as a client know of. As Gossip updates, it will be able to alert you that there are new features available. If not present, then a default of <code>1.0.0</code> is used.</li>
</ul>

<p>You will receive a response from this with a sucess or failure message.</p>

<pre>{
  "event": "authenticate",
  "status": "success"
  "payload": {
    "unicode": "✔️",
    "version": "<%= Gossip.version() %>"
  }
}</pre>

<ul>
  <li><code>unicode</code> is present to ensure you properly parse unicode characters.</li>
  <li><code>version</code> is the current version of Gossip.</li>
</ul>

<p>If you attempt to subscribe to bad channels, you may receive a failed subscribe message. See more below about valid channel names.</p>

<hr />

<%= DocView.event_header("heartbeat") %>

<p><b>Since 1.0.0</b></p>

<p>Once you are authenticated, the server will start sending heartbeat events.</p>

<pre>{
  "event": "heartbeat",
}</pre>

<p>When you receive a heartbeat, you <b>must</b> respond to it with a heartbeat of your own.</p>

<pre>{
  "event": "heartbeat",
  "payload": {
    "players": ["player"]
  }
}</pre>

<ul>
  <li><code>players</code> is optional but suggested. You should include your full player list to keep Gossip in sync with you. Gossip must know your players are online to forward remote tells.</li>
</ul>

<p><b>NOTE:</b> If you do not respond to these heartbeats the socket will be closed after three failed beats.</p>

<hr />

<%= DocView.event_header("restart") %>

<p>When Gossip knows a restart is imminent, you will receive this event. This event will be sent before a server restart due to a deploy.</p>

<p>After receiving this event, your connection to Gossip may drop at any moment.</p>

<pre>{
  "event": "restart",
  "ref": "f15ed228-ad43-4af4-9466-7d353fc9bf11",
  "payload": {
    "downtime": 15
  }
}</pre>

<ul>
  <li><code>downtime</code> is a suggested amount of seconds you should wait before restarting. It is a hint from the server for how long it thinks Gossip will be down.</li>
</ul>

<hr />

<%= DocView.event_header("channels/subscribe") %>

<p><b>Since 1.0.0</b></p>

<p>Subscribe to a new channel on your currently connected socket.</p>

<pre>{
  "event": "channels/subscribe",
  "ref": "a6f8006d-ddac-465e-a3df-fb440e83189b",
  "payload": {
    "channel": "gossip"
  }
}</pre>

<ul>
  <li><code>ref</code> is optional.</li>
  <li><code>channel</code> is required.</li>
</ul>

<p>If a <code>ref</code> is included then you will get a response back confirming your message.</p>

<pre>{
  "event": "channels/subscribe",
  "ref": "a6f8006d-ddac-465e-a3df-fb440e83189b"
}</pre>

<p>You may receive a response to this as a failure, channel names are validated. Channel names must be &lt;=15 characters and letters only.</p>

<pre>{
  "event": "channels/subscribe",
  "ref": "a6f8006d-ddac-465e-a3df-fb440e83189b",
  "status": "failure",
  "error": "Could not subscribe to 'bad channel name'",
}</pre>

<hr />

<%= DocView.event_header("channels/unsubscribe") %>

<p><b>Since 1.0.0</b></p>

<p>Unsubscribe to a channel you are subscribed to.</p>

<pre>{
  "event": "channels/unsubscribe",
  "ref": "e4d07334-4a4b-44ba-94dc-2b937160a466",
  "payload": {
    "channel": "gossip"
  }
}</pre>

<ul>
  <li><code>ref</code> is optional.</li>
  <li><code>channel</code> is required.</li>
</ul>

<p>If a <code>ref</code> is included then you will get a response back confirming your message.</p>

<pre>{
  "event": "channels/unsubscribe",
  "ref": "e4d07334-4a4b-44ba-94dc-2b937160a466"
}</pre>

<hr />

<%= DocView.event_header("channels/broadcast") %>

<p><b>Since 1.0.0</b></p>

<p>When a channel you are subscribed to receives a new message you will get a broadcast.</p>

<pre>{
  "event": "channels/broadcast",
  "ref": "89036074-446f-41ab-b87a-44ef1f962f2e",
  "payload": {
    "channel": "gossip",
    "message": "Hello everyone!",
    "game": "ExVenture",
    "name": "Player"
  }
}</pre>

<ul>
  <li><code>message</code> is the message itself.</li>
  <li>See <%= link("Common Vocabulary", to: "#common-vocabulary") %> for other payload data.</li>
</ul>


<hr />

<%= DocView.event_header("channels/send") %>

<p><b>Since 1.0.0</b></p>

<p>To send a new message, use this event.</p>

<p>The <code>message</code> in the payload will have MXP tags stripped before broadcasting. Do not send MXP data.</p>

<p>You will not get a <code>channels/broadcast</code> event for messages you send.</p>

<pre>{
  "event": "channels/send",
  "ref": "28523394-6dcf-4c2a-ad1d-2d0ef8bb823b",
  "payload": {
    "channel": "gossip",
    "name": "Player",
    "message": "Hello everyone!"
  }
}</pre>

<ul>
  <li><code>ref</code> is olitional.</li>
  <li><code>channel</code> is required. <code>channel</code> must be a channel you are subscribed to.</li>
  <li><code>name</code> is required.</li>
  <li><code>message</code> is required.</li>
  <li>See <%= link("Common Vocabulary", to: "#common-vocabulary") %> for payload data.</li>
</ul>

<p>If a <code>ref</code> is included then you will get a response back confirming your message.</p>

<pre>{
  "event": "channels/send",
  "ref": "28523394-6dcf-4c2a-ad1d-2d0ef8bb823b",
}</pre>

<hr />

<%= DocView.flag_header("players", "Player Events") %>

<p><b>Since 1.0.0</b></p>

<p>These events are related to the <code>players</code> support flag. Add this to your <code>supports</code> array when connecting.</p>

<%= DocView.event_header("players/sign-in") %>

<p><b>Since 1.0.0</b></p>

<p>When a player signs into your game, send this message. It will broadcast to other games and also update Gossip's tracking of who is signed in.</p>

<p>You will not receive a <code>players/sign-in</code> event back for messages you send.</p>

<pre>{
  "event": "players/sign-in",
  "ref": "0e11c053-65b3-477c-aae9-5cd8cf21dc8f",
  "payload": {
    "name": "Player"
  }
}</pre>

<ul>
  <li><code>ref</code> is optional.</li>
  <li><code>name</code> is required.</li>
  <li>See <%= link("Common Vocabulary", to: "#common-vocabulary") %> for payload data.</li>
</ul>

<p>If a <code>ref</code> is included then you will get a response back confirming your message.</p>

<pre>{
  "event": "players/sign-in",
  "ref": "0e11c053-65b3-477c-aae9-5cd8cf21dc8f"
}</pre>

<p>While connected with the <code>players</code> flag, you may receive an update from another game. You may wish to broadcast to your local players that someone has come online in the network.</p>

<pre>{
  "event": "players/sign-in",
  "payload": {
    "game": "ExVenture",
    "name": "Player"
  }
}</pre>

<p>See <%= link("Common Vocabulary", to: "#common-vocabulary") %> for information on payload data.</p>

<p><b>Note:</b> you must still respond to heartbeats with your full list. Each beat fully replaces the list ensuring it keeps in sync. This is for between the beats and notifying connected games.</p>

<hr />

<%= DocView.event_header("players/sign-out") %>

<p><b>Since 1.0.0</b></p>

<p>When a player signs out of your game, send this message. It will broadcast to other games and also update Gossip's tracking of who is signed in.</p>

<p>You will not receive a <code>players/sign-out</code> event back for messages you send.</p>

<pre>{
  "event": "players/sign-out",
  "ref": "da4c5503-dd15-490a-9d0d-85e2c50b72de",
  "payload": {
    "name": "Player"
  }
}</pre>

<ul>
  <li><code>ref</code> is optional.</li>
  <li><code>name</code> is required.</li>
  <li>See <%= link("Common Vocabulary", to: "#common-vocabulary") %> for payload data.</li>
</ul>

<p>If a <code>ref</code> is included then you will get a response back confirming your message.</p>

<pre>{
  "event": "players/sign-out",
  "ref": "da4c5503-dd15-490a-9d0d-85e2c50b72de"
}</pre>

<p>While connected with the <code>players</code> flag, you may receive an update from another game. You may wish to broadcast to your local players that someone has gone offline in the network.</p>

<pre>{
  "event": "players/sign-out",
  "payload": {
    "game": "ExVenture",
    "name": "Player"
  }
}</pre>

<p>See <%= link("Common Vocabulary", to: "#common-vocabulary") %> for information on payload data.</p>

<p><b>Note:</b> you must still respond to heartbeats with your full list. Each beat fully replaces the list ensuring it keeps in sync. This is for between the beats and notifying connected games.</p>

<hr />

<%= DocView.event_header("players/status") %>

<p><b>Since 1.1.0</b></p>

<p>To check the status of other players on the network, send a <code>players/status</code> event.</p>

<pre>{
  "event": "players/status",
  "ref": "c8cbaef2-b6e9-4110-b712-a312aee9e7d4"
}</pre>

<p><code>ref</code> is required.</p>

<p>In response you will receive a message per connected game.</p>

<pre>{
  "event": "players/status",
  "ref": "c8cbaef2-b6e9-4110-b712-a312aee9e7d4",
  "payload": {
     "game": "ExVenture",
     "players: ["admin"]
  }
}</pre>

<ul>
  <li><code>players</code> is the list of players that are currently online.</li>
  <li>See <%= link("Common Vocabulary", to: "#common-vocabulary") %> for payload data.</li>
</ul>

<h5>Single Game Update</h5>

<p>You can request an update to a single game by adding its name in the payload.</p>

<pre>{
  "event": "players/status",
  "ref": "c8cbaef2-b6e9-4110-b712-a312aee9e7d4",
  "payload": {
    "game": "ExVenture"
  }
}</pre>

<ul>
  <li><code>ref</code> is required.</li>
  <li><code>name</code> is required.</li>
  <li>See <%= link("Common Vocabulary", to: "#common-vocabulary") %> for payload data.</li>
</ul>

<p>You will only receive an update for that game. It will look the same as above.</p>

<hr />

<%= DocView.flag_header("tells", "Tell Events") %>

<p><b>Since 2.0.0</b></p>

<p>These events are related to the <code>tells</code> support flag. Add this to your <code>supports</code> array when connecting.</p>

<p>It is suggested to also support the <code>players</code> flag, as you can keep your players' status more up to date on Gossip. Players must be online on Gossip to receive tells.</p>

<%= DocView.event_header("tells/send") %>

<p><b>Since 2.0.0</b></p>

<pre>{
  "event": "tells/send",
  "ref": "5c528fc3-cb9e-4867-98ea-6e235594241e",
  "payload": {
    "from_name": "Player",
    "to_game": "ExVenture",
    "to_name": "eric",
    "sent_at": "2018-07-17T13:12:28Z",
    "message": "hi"
  }
}</pre>

<ul>
  <li><code>ref</code> is required.</li>
  <li><code>from_name</code> is required. This is the name of the player sending the tell.</li>
  <li><code>to_game</code> is required. This is the name of the game that will process the tell. The server will match this case insensitive against connected games.</li>
  <li><code>to_name</code> is required. This is the name of the receiving player.</li>
  <li><code>sent_at</code> is required. This is an ISO8601 formatted timestamp of when the message was sent. It <b>must</b> be in UTC, use the <code>Z</code> format for UTC.</li>
  <li><code>message</code> is required. This is the body of the tell.</li>
</ul>

<p>If the game and player are online, you will receive a response back.</p>

<pre>{
  "event": "tells/send",
  "ref": "5c528fc3-cb9e-4867-98ea-6e235594241e",
  "status": "success"
}</pre>

<p>If the tell did not succeed in sending, you will receive an error response.</p>

<pre>{
  "event": "tells/send",
  "ref": "5c528fc3-cb9e-4867-98ea-6e235594241e",
  "status": "failure",
  "error": "game offline"
}</pre>

<p>Possible failure responses are:

<ul>
  <li><code>game offline</code></li>
  <li><code>player offline</code></li>
  <li><code>not supported</code>, the connected game does not support tells</li>
</ul>

<hr />

<%= DocView.event_header("tells/receive") %>

<p><b>Since 2.0.0</b></p>

<p>When another game sends a tell to your game, you will receive this event.</p>

<pre>{
  "event": "tells/receive",
  "ref": "d4a08749-acbe-45ab-bc0f-51609fd6b95b",
  "payload": {
    "from_game": "AMud",
    "from_name": "Player",
    "to_name": "eric",
    "sent_at": "2018-07-17T13:12:28Z",
    "message": "hi"
  }
}</pre>

<ul>
  <li><code>from_name</code> is the name of the player sending the tell.</li>
  <li><code>from_game</code> is the name of the game sending the tell.</li>
  <li><code>to_name</code> is the name of the receiving player.</li>
  <li><code>sent_at</code> is an ISO8601 formatted timestamp of when the message was sent. It is in UTC.</li>
  <li><code>message</code> is the body of the tell.</li>
</ul>

<hr />

<%= DocView.flag_header("games", "Game Events") %>

<p><b>Since 2.1.0</b></p>

<p>These events are related to the <code>games</code> support flag. Add this to your <code>supports</code> array when connecting.</p>

<hr />

<%= DocView.event_header("games/status") %>

<p><b>Since 2.1.0</b></p>

<p>To check the status of other games on the network, send a <code>games/status</code> event.</p>

<pre>{
  "event": "games/status",
  "ref": "c8cbaef2-b6e9-4110-b712-a312aee9e7d4"
}</pre>

<p><code>ref</code> is required.</p>

<p>In response you will receive a message per connected game.</p>

<pre>{
  "event": "games/status",
  "ref": "c8cbaef2-b6e9-4110-b712-a312aee9e7d4",
  "payload": {
    "game": "ExVenture",
    "display_name": "An ExVenture game",
    "description": "...",
    "homepage_url": "https://...",
    "user_agent": "ExVenture 0.26.0",
    "user_agent_repo_url": "https://...",
    "connections": [
      {"type": "telnet", "host": "example.com", "port": "4000"},
      {"type": "web", "url": "https://example.com/play"}
    ],
    "supports": ["channels", "players", "tells", "games"],
    "players_online_count": 3,
    "uptime_seconds": 123
  }
}</pre>

<ul>
  <li><code>display</code> is a less restrictive name for the game.</li>
  <li><code>description</code> is text about the game.</li>
  <li><code>homepage_url</code> is the home page for the game.</li>
  <li><code>user_agent</code> is the reported user agent of the connectin game. May not be present.</li>
  <li><code>user_agent_repo_url</code> is a source code repository for the user agent. May not be present.</li>
  <li><code>connections</code> is an array of connection objects. See below for more about <%= link("connections", to: "#game-connections") %>. May not be present</li>
  <li><code>supports</code> if the game is currently connected, this is an array of what the socket supports. May not be present.</li>
  <li><code>players_online_count</code> if the game is currently connected, the number of players that are online. May not be present.</li>
  <li><code>uptime_seconds</code> if the game is currently connected, the number of seconds the socket has been online. May not be present.</li>
  <li>See <%= link("Common Vocabulary", to: "#common-vocabulary") %> for payload data.</li>
</ul>

<h5 id="game-connections">Connection Object</h5>

<p>A connection object contains ways of connecting to play the game.</p>

<p>Current connection types are: <code>web</code>, <code>telnet</code>, and <code>secure telnet</code>.</p>

<h6>web</h6>

This is a web based game.

<pre>{
  "type": "web",
  "url": "https://example.com/play"
}</pre>

<ul>
  <li><code>type</code> is set to "web"</li>
  <li><code>url</code> is a web page to start playing the game.</li>
</ul>

<h6>telnet</h6>

This is a standard telnet connection.

<pre>{
  "type": "telnet",
  "host": "example.com"
  "port": 4000
}</pre>

<ul>
  <li><code>type</code> is set to "telnet"</li>
  <li><code>host</code> is the host name to connect to.</li>
  <li><code>port</code> is the port to connect to.</li>
</ul>

<h6>secure telnet</h6>

This is a TLS secured telnet connection.

<pre>{
  "type": "secure telnet",
  "host": "example.com"
  "port": 4000
}</pre>

<ul>
  <li><code>type</code> is set to "telnet"</li>
  <li><code>host</code> is the host name to connect to.</li>
  <li><code>port</code> is the port to connect to.</li>
</ul>

<h5>Query for a Single Game</h5>

<p>You can request an update to a single game by adding its name in the payload.</p>

<p>You can also query for games not connected via this event.</p>

<pre>{
  "event": "games/status",
  "ref": "c8cbaef2-b6e9-4110-b712-a312aee9e7d4",
  "payload": {
    "game": "ExVenture"
  }
}</pre>

<ul>
  <li><code>ref</code> is required.</li>
  <li><code>name</code> is required.</li>
  <li>See <%= link("Common Vocabulary", to: "#common-vocabulary") %> for payload data.</li>
</ul>

<p>You will only receive an update for that game. It will look the same as above.</p>
  </div>
</div>
