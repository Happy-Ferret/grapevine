<div class="row">
  <div class="col-md-8 offset-md-2">
<h2>Docs</h2>

<p>Thanks for checking out Gossip.</p>

<%= if !Map.get(assigns, :current_user) do %>
  <p>Before continuing, you should <%= link("create an account", to: registration_path(@conn, :new)) %> or <%= link("sign in", to: session_path(@conn, :new)) %>.</p>
<% end %>

<h3 id="config">
  <%= link(to: "#config") do %>
    Game Configuration
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p>Once you have an account, visit your <%= link("configuration page", to: user_game_path(@conn, :index)) %>. This will let you create a game on Gossip. It will then show you your Client ID and Client Secret which will be used to authenticate against the Gossip network.</p>

<h3 id="channels">
  <%= link(to: "#channels") do %>
    Channels
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p>You also subscribe to the channels you want your game to pay attention to. Right now Gossip has the following channels:<p>

<ul>
  <%= Enum.map(Channels.all(), fn channel -> %>
    <li><code><%= channel.name %></code></li>
  <% end) %>
</ul>

<p>In addition to those listed above, you can subscribe to any valid channel name. This will make dynamically create channels as you subscribe to them. They will exist for anyone to connect to, but not show on the website until the admins approve them.</p>

<p>A valid channel name must be &lt;=15 characters and letters only.</p>

<p>You will only recieve messages for channels you are subscribed to.</p>

<h3 id="server-support">
  <%= link(to: "#server-support") do %>
    Server Support
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p>The following servers/frameworks have built-in support or a library to import for Gossip support:</p>

<ul>
  <li><%= link("ExVenture", to: "https://exventure.org/admin/gossip/") %></li>
  <li><%= link("Elixir", to: "https://github.com/oestrich/gossip-elixir") %></li>
  <li><%= link("Ranvier", to: "https://github.com/oestrich/gossip-ranvier") %></li>
</ul>

<h3 id="connecting">
  <%= link(to: "#connecting") do %>
    Connecting
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p>Once you have your Client ID and Client Secret, you can start connecting to the Gossip network. Point your websocket client at:</p>

<pre><code><%= socket_url() %></code></pre>

<p>Once you are connected, you must send an <code>authenticate</code> message to authenticate your connection.</p>

<h3 id="citizen">
  <%= link(to: "#citizen") do %>
    Expectations of a Connecting Game
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p>If you are connecting to the Gossip network, please know that you connect under the following assumptions:</p>

<ol>
  <li>Gossip <em>will</em> go down sometime while you are connected. Most likely for a new deploy. Make sure your game does not crash because of this.</li>
  <li>While Gossip is down, your app should transition channels to local only.</li>
  <li>Similarly, you should reconnect back to Gossip when it comes back online.</li>
  <li>You must support unicode at the server level. Several connected games allow unicode input so you may receive it at any time.</li>
</ol>

<p>It is suggested to follow these:</p>

<ol>
  <li>Formatting for player names should be in the format of <code>Player@GameName</code>.</li>
</ol>

<h3 id="events">
  <%= link(to: "#events") do %>
    Core Events (<code>channels</code>)
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p><b>Since 1.0.0</b></p>

<p>These are the core features of connecting to Gossip. These include authenticating, a heartbeat, basic public channels.</p>

<h4 id="authenticate">
  <%= link(to: "#authenticate") do %>
    authenticate
    <i class="fas fa-link"></i>
  <% end %>
</h4>

<p><b>Since 1.0.0</b></p>

<p>This event authorizes the connection and afterwards you will start to receive new broadcasts.</p>

<p><code>supports</code> is required. This is an array of features the connecting game supports. It must contain at least <code>channels</code>. Extra unknown options will result in the socket being disconnected.</p>

<p><code>channels</code> is optional. This is an array of channels you wish to subscribe to on start. See the <%= link("list of channels", to: chat_path(@conn, :index)) %> for available channels you can subscribe to.</p>

<p><code>user_agent</code> is optional but suggested. If present, this will show on the <%= link("Games", to: game_path(@conn, :index)) %> page.</p>

<p><code>version</code> is optional but suggested. This is highest version number that you as a client know of. As Gossip updates, it will be able to alert you that there are new features available. If not present, then a default of <code>1.0.0</code> is used.</p>

<pre>{
  "event": "authenticate",
  "payload": {
    "client_id": "client id",
    "client_secret": "client secret",
    "supports": ["channels"],
    "channels": ["gossip"],
    "version": "1.0.0",
    "user_agent": "ExVenture 0.23.0"
  }
}</pre>

<p>You will receive a response from this with a sucess or failure message.</p>

<pre>{
  "event": "authenticate",
  "status": "success"
  "payload": {
    "unicode": "✔️",
    "version": "<%= Gossip.version() %>"
  }
}</pre>

<p>The version number returned is the current version of Gossip.</p>

<p>If you attempt to subscribe to bad channels, you may receive a failed subscribe message. See more below about valid channel names.</p>

<hr />

<h4 id="heartbeat">
  <%= link(to: "#heartbeat") do %>
    heartbeat
    <i class="fas fa-link"></i>
  <% end %>
</h4>

<p><b>Since 1.0.0</b></p>

<p>Once you are authenticated, the server will start sending heartbeat events.</p>

<pre>{
  "event": "heartbeat",
}</pre>

<p>When you receive a heartbeat, you must respond to it with a heartbeat of your own. This should include a list of your players that are online.</p>

<pre>{
  "event": "heartbeat",
  "payload": {
    "players": ["player"]
  }
}</pre>

<p><b>NOTE:</b> If you do not respond to these heartbeats the socket will be closed after three failed beats.</p>

<hr />

<h4 id="restart">
  <%= link(to: "#restart") do %>
    restart
    <i class="fas fa-link"></i>
  <% end %>
</h4>

<p>When Gossip knows a restart is imminent, you will receive this event. This event will be sent when mostly before a server restart due to a deploy.</p>

<p>After receiving this event, your connection to Gossip may drop at any moment.</p>

<pre>{
  "event": "restart",
  "ref": "f15ed228-ad43-4af4-9466-7d353fc9bf11",
  "payload": {
    "downtime": 15
  }
}</pre>

<p><code>downtime</code> is a suggested amount of seconds you should wait before restarting. It is a hint from the server for how long it thinks Gossip will be down.</p>

<hr />

<h4 id="channels-subscribe">
  <%= link(to: "#channels-subscribe") do %>
    channels/subscribe
    <i class="fas fa-link"></i>
  <% end %>
</h4>

<p><b>Since 1.0.0</b></p>

<p>Subscribe to a new channel on your currently connected socket.</p>

<pre>{
  "event": "channels/subscribe",
  "ref": "a6f8006d-ddac-465e-a3df-fb440e83189b",
  "payload": {
    "channel": "gossip"
  }
}</pre>

<p>On success, if a <code>ref</code> is included then you will get a response back confirming your message.</p>

<pre>{
  "event": "channels/subscribe",
  "ref": "a6f8006d-ddac-465e-a3df-fb440e83189b"
}</pre>

<p>You may receive a response to this as a failure, channel names are validated. Channel names must be &lt;=15 characters and letters only.</p>

<pre>{
  "event": "channels/subscribe",
  "ref": "a6f8006d-ddac-465e-a3df-fb440e83189b",
  "status": "failure",
  "error": "Could not subscribe to 'bad channel name'",
}</pre>

<hr />

<h4 id="channels-unsubscribe">
  <%= link(to: "#channels-unsubscribe") do %>
    channels/unsubscribe
    <i class="fas fa-link"></i>
  <% end %>
</h4>

<p><b>Since 1.0.0</b></p>

<p>Unsubscribe to a channel you are subscribed to.</p>

<pre>{
  "event": "channels/unsubscribe",
  "ref": "e4d07334-4a4b-44ba-94dc-2b937160a466",
  "payload": {
    "channel": "gossip"
  }
}</pre>

<p>On success, if a <code>ref</code> is included then you will get a response back confirming your message.</p>

<pre>{
  "event": "channels/unsubscribe",
  "ref": "e4d07334-4a4b-44ba-94dc-2b937160a466"
}</pre>

<hr />

<h4 id="channels-broadcast">
  <%= link(to: "#channels-broadcast") do %>
    channels/broadcast
    <i class="fas fa-link"></i>
  <% end %>
</h4>

<p><b>Since 1.0.0</b></p>

<p>When a channel you are subscribed to receives a new message you will get a broadcast.</p>

<pre>{
  "event": "channels/broadcast",
  "ref": "89036074-446f-41ab-b87a-44ef1f962f2e",
  "payload": {
    "channel": "gossip",
    "message": "Hello everyone!",
    "game": "ExVenture",
    "name": "Player"
  }
}</pre>

<hr />

<h4 id="channels-send">
  <%= link(to: "#channels-send") do %>
    channels/send
    <i class="fas fa-link"></i>
  <% end %>
</h4>

<p><b>Since 1.0.0</b></p>

<p>To send a new message, use this event. <code>channel</code> must be a channel you are subscribed to. All of the fields in the <code>payload</code> are required.</p>

<p>The <code>message</code> in the payload will have MXP tags stripped before broadcasting. Do not send MXP data.</p>

<p>You will not get a broadcast message back for messages you send.</p>

<pre>{
  "event": "channels/send",
  "ref": "28523394-6dcf-4c2a-ad1d-2d0ef8bb823b",
  "payload": {
    "channel": "gossip",
    "name": "Player",
    "message": "Hello everyone!"
  }
}</pre>

<p>On success, if a <code>ref</code> is included then you will get a response back confirming your message.</p>

<pre>{
  "event": "channels/send",
  "ref": "28523394-6dcf-4c2a-ad1d-2d0ef8bb823b",
}</pre>

<hr />

<h3 id="players">
  <%= link(to: "#players") do %>
    Player Events (<code>players</code>)
    <i class="fas fa-link"></i>
  <% end %>
</h3>

<p><b>Since 1.0.0</b></p>

<p>These events are related to the <code>players</code> support flag. Add this to your <code>supports</code> array when connecting.</p>

<h4 id="players-sign-in">
  <%= link(to: "#players-sign-in") do %>
    players/sign-in
    <i class="fas fa-link"></i>
  <% end %>
</h4>

<p><b>Since 1.0.0</b></p>

<p>When a player signs into your game, send this message. It will broadcast to other games and also update Gossip's tracking of who is signed in.</p>

<p>You will not get a broadcast message back for messages you send.</p>

<pre>{
  "event": "players/sign-in",
  "ref": "0e11c053-65b3-477c-aae9-5cd8cf21dc8f",
  "payload": {
    "name": "Player"
  }
}</pre>

<p>On success, if a <code>ref</code> is included then you will get a response back confirming your message.</p>

<pre>{
  "event": "players/sign-in",
  "ref": "0e11c053-65b3-477c-aae9-5cd8cf21dc8f"
}</pre>

<p>While connected with the <code>players</code> flag, you may receive an update from another game. You may wish to broadcast to your local players that someone has come online in the network.</p>

<pre>{
  "event": "players/sign-in",
  "payload": {
    "game": "ExVenture",
    "name": "Player"
  }
}</pre>

<p><b>Note:</b> you must still respond to heartbeats with your full list. Each beat fully replaces the list ensuring it keeps in sync. This is for between the beats and notifying connected games.</p>

<hr />

<h4 id="players-sign-out">
  <%= link(to: "#players-sign-out") do %>
    players/sign-out
    <i class="fas fa-link"></i>
  <% end %>
</h4>

<p><b>Since 1.0.0</b></p>

<p>When a player signs out of your game, send this message. It will broadcast to other games and also update Gossip's tracking of who is signed in.</p>

<p>You will not get a broadcast message back for messages you send.</p>

<pre>{
  "event": "players/sign-out",
  "ref": "da4c5503-dd15-490a-9d0d-85e2c50b72de",
  "payload": {
    "name": "Player"
  }
}</pre>

<p>On success, if a <code>ref</code> is included then you will get a response back confirming your message.</p>

<pre>{
  "event": "players/sign-out",
  "ref": "da4c5503-dd15-490a-9d0d-85e2c50b72de"
}</pre>

<p>While connected with the <code>players</code> flag, you may receive an update from another game. You may wish to broadcast to your local players that someone has gone offline in the network.</p>

<pre>{
  "event": "players/sign-out",
  "payload": {
    "game": "ExVenture",
    "name": "Player"
  }
}</pre>

<p><b>Note:</b> you must still respond to heartbeats with your full list. Each beat fully replaces the list ensuring it keeps in sync. This is for between the beats and notifying connected games.</p>

<h3 id="socket-errors">Socket Error Code</h3>

<dl>
  <dt>4000</dt>
  <dd>Authentication failed</dd>

  <dt>4001</dt>
  <dd>Heartbeat failure</dd>
</dl>
  </div>
</div>
